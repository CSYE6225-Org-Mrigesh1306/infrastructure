AWSTemplateFormatVersion: "2010-09-09"

Description: CSYE6225-INFRA VPC with public 3 subnets

Parameters:
  VpcCIDRBlock:
    Default: 10.0.0.0/16
    Description: "CIDR BLOCK for this VPC"
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: "Enter IP range for public subnet 1"
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/24
    Description: "Enter IP range for public subnet 2"
    Type: String

  PublicSubnet3CIDR:
    Default: 10.0.2.0/24
    Description: "Enter IP range for public subnet 3"
    Type: String

  AMIImage:
    Description: "Enter Custom AMI Id"
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDRBlock
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: 'default'
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Test IGW
  
  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0,!GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: 'true'
      Tags: 
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref myVPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1,!GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: 'true'
      Tags: 
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref myVPC

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [2,!GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: 'true'
      Tags: 
        - Key: Name
          Value: Public Subnet 3
      VpcId: !Ref myVPC

  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myInternetGatewayAttachment
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref myInternetGateway
      RouteTableId: !Ref myRouteTable

  PublicSubnet1RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties: 
     RouteTableId: !Ref myRouteTable
     SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties: 
     RouteTableId: !Ref myRouteTable
     SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties: 
     RouteTableId: !Ref myRouteTable
     SubnetId: !Ref PublicSubnet3
  
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS (80/443) and Custom access (8080) port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: SSHLocation
      Tags:
      - Key: Name
        Value: Application Security Group
      VpcId: 
        Ref: myVPC
  
  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 
        Ref : AMIImage
      KeyName: mrigesh
      InstanceType: "t2.micro"
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: ApplicationSecurityGroup
        SubnetId: 
          Ref: PublicSubnet1      
        
Outputs:
  myVPC:
    Description: The VPC ID
    Export: 
      Name : !Sub ${AWS::StackName}-VPC
    Value: !Ref myVPC

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

  PublicSubnet3:
    Description: Public Subnet 3 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet3
    Value: !Ref PublicSubnet3