AWSTemplateFormatVersion: "2010-09-09"

Description: CSYE6225-INFRASTRUCTURE

Parameters:
  VpcCIDRBlock:
    Default: 10.0.0.0/16
    Description: "CIDR BLOCK for this VPC"
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: "Enter IP range for public subnet 1"
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/24
    Description: "Enter IP range for public subnet 2"
    Type: String

  PublicSubnet3CIDR:
    Default: 10.0.2.0/24
    Description: "Enter IP range for public subnet 3"
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.3.0/24
    Description: "Enter IP range for Private subnet 1"
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.4.0/24
    Description: "Enter IP range for Private subnet 2"
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.0.5.0/24
    Description: "Enter IP range for Private subnet 3"
    Type: String

  AMIImage:
    Description: "Enter Custom AMI Id"
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

  DBInstanceID:
    Default: csye62251
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: csye62251
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.

  DBUsername:
    Default: csye6225
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    Default: Mrigesh13
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.
  
  ProfileName:
    Default: dev
    Type: String

  accesskey:
    Type: String
    Default: AKIAYJGL27QOCATILIVI
  
  secretkey:
    Type: String
    Default: 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

  DomainName:
    Type: String
    Default: "dev.mrigeshdasgupta.me."


Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDRBlock
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: 'default'
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Test IGW
  
  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC


  # PUBLIC SUBNETS 
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0,!GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: 'true'
      Tags: 
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref myVPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1,!GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: 'true'
      Tags: 
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref myVPC

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [2,!GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: 'true'
      Tags: 
        - Key: Name
          Value: Public Subnet 3
      VpcId: !Ref myVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myInternetGatewayAttachment
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref myInternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties: 
     RouteTableId: !Ref PublicRouteTable
     SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties: 
     RouteTableId: !Ref PublicRouteTable
     SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties: 
     RouteTableId: !Ref PublicRouteTable
     SubnetId: !Ref PublicSubnet3

    
    # PRIVATE SUBNETS 
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0,!GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: 'false'
      Tags: 
        - Key: Name
          Value: Private Subnet 1
      VpcId: !Ref myVPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1,!GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: 'false'
      Tags: 
        - Key: Name
          Value: Private Subnet 2
      VpcId: !Ref myVPC

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [2,!GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: 'false'
      Tags: 
        - Key: Name
          Value: Private Subnet 3
      VpcId: !Ref myVPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: Private Route Table


  PrivateSubnet1RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable
   Properties: 
     RouteTableId: !Ref PrivateRouteTable
     SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable
   Properties: 
     RouteTableId: !Ref PrivateRouteTable
     SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   DependsOn:
    - PrivateSubnet3
    - PrivateRouteTable
   Properties: 
     RouteTableId: !Ref PrivateRouteTable
     SubnetId: !Ref PrivateSubnet3
  
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS (80/443) and Custom access (8080) port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          #SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
      - Key: Name
        Value: Application Security Group
      VpcId: 
        Ref: myVPC

  DatabaseSecurityGroup:
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DB access on port 3306 through ApplicationSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      Tags:
      - Key: Name
        Value: Database Security Group
      VpcId: 
        Ref: myVPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow web app access through Loadbalancer 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Load Balancer Security Group
      VpcId: 
        Ref: myVPC

  # S3 BUCKET
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - !Ref ProfileName
          - "mrigeshdasgupta.me"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Standard-IA rule
            Prefix: standard
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA     
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  #RDS Parameter Group               
  DBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample MySQL Parameter Group
      Family: mysql8.0
      Tags: 
        - Key: Name
          Value: RDSParameterGroup

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for mySQL database
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2

  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      DBName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      DBParameterGroupName: !Ref DBParameterGroup
      # DBSecurityGroups:
      # - Ref: DatabaseSecurityGroup
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId
      Engine: MySQL
      EngineVersion: 8.0.16
      MultiAZ: false
      PubliclyAccessible: false

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
              Service:
                - ec2.amazonaws.com
          Action:
          - sts:AssumeRole

  IAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "s3:PutObject*"
              - "s3:GetObject*"
              - "s3:DeleteObject"
            Resource: 
              - !Sub "arn:aws:s3:::${S3Bucket}"
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
      Roles:
        - !Ref CodeDeployEC2ServiceRole

  CodeDeployEC2ServiceRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "CodeDeployEC2ServiceRole"
      # Policies:
      #   - Ref: RolePolicies
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployEC2S3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "s3:GetObject*"
              - 's3:PutObject'
              - 's3:DeleteObject'
              - "s3:ListBucket"
            Resource: 
              - "arn:aws:s3:::mrigeshs3bucket.demo"
              - "arn:aws:s3:::mrigeshs3bucket.demo/*"
      Roles:
        - !Ref CodeDeployEC2ServiceRole
  
  GHUploadToS3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: GH-Upload-To-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "s3:PutObject*"            
              - "s3:GetObject*"
              - "s3:ListBucket"
              - "s3:GetObjectVersion"
              - "s3:Delete*"
            Resource: 
              - "arn:aws:s3:::mrigeshs3bucket.demo"
              - "arn:aws:s3:::mrigeshs3bucket.demo/*"
      Users: 
        - "ghactions-app"

  GHCodeDeploy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "GH-Code-Deploy"
      PolicyDocument:
        Version: 2012-10-17
        Statement: [
          {
          "Effect": "Allow",
          "Action": [
          "codedeploy:RegisterApplicationRevision",
          "codedeploy:GetApplicationRevision"
          ],
          "Resource": [
            "arn:aws:codedeploy:us-east-1:170773480295:application:csye6225-webapp"
          ]
          },
          {
          "Effect": "Allow",
          "Action": [
          "codedeploy:CreateDeployment",
          "codedeploy:GetDeployment"
          ],
          "Resource": [
          "*"
          ]
          },
          {
          "Effect": "Allow",
          "Action": [
            "codedeploy:GetDeploymentConfig"
          ],
          "Resource": [
          "arn:aws:codedeploy:us-east-1:170773480295:deploymentconfig:CodeDeployDefault.OneAtATime",
          "arn:aws:codedeploy:us-east-1:170773480295:deploymentconfig:CodeDeployDefault.HalfAtATime",
          "arn:aws:codedeploy:us-east-1:170773480295:deploymentconfig:CodeDeployDefault.AllAtOnce"
          ]
          }
        ]
      Users: 
        - "ghactions-app"

  GHEC2AMI:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "GH-EC2-AMI"
      PolicyDocument:
        Version: 2012-10-17
        Statement: [
          {
          "Effect": "Allow",
          "Action": [
          "ec2:AttachVolume",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CopyImage",
          "ec2:CreateImage",
          "ec2:CreateKeypair",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSnapshot",
          "ec2:CreateTags",
          "ec2:CreateVolume",
          "ec2:DeleteKeyPair",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteSnapshot",
          "ec2:DeleteVolume",
          "ec2:DeregisterImage",
          "ec2:DescribeImageAttribute",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeRegions",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVolumes",
          "ec2:DetachVolume",
          "ec2:GetPasswordData",
          "ec2:ModifyImageAttribute",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifySnapshotAttribute",
          "ec2:RegisterImage",
          "ec2:RunInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "iam:PassRole"
          ],
          "Resource": "*"
          }
        ]
      Users: 
        - "ghactions-app"

  cloudwatchAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "EC2CloudWatchPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
            Resource: "*"
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
              - 'ssm:PutParameter'
            Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
      Roles:
        - Ref: CodeDeployEC2ServiceRole

  loggroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: csye6225
      RetentionInDays: 7

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: a07-ec2-instance-profile
      Path: /
      Roles:
      - Ref: CodeDeployEC2ServiceRole

  InstLaunchTemplate:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
        ImageId: 
          Ref : AMIImage
        InstanceType: t2.micro
        KeyName: mrigesh
        IamInstanceProfile: !Ref InstanceProfile
        AssociatePublicIpAddress: "true"
        SecurityGroups:
        - !Ref ApplicationSecurityGroup     
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            echo export DB_CONNECT="${MyDB.Endpoint.Address}" >> /etc/profile
            echo export MYSQL_USER="${DBUsername}" >> /etc/profile
            echo export MYSQL_PASSWORD="${DBPassword}" >> /etc/profile
            echo export S3BUCKET="${S3Bucket}" >> /etc/profile
            echo export MYSQL_DATABASE="csye62251" >> /etc/profile
            echo export AWS_REGION="us-east-1" >> /etc/profile
            echo Environment=\"DB_CONNECT=${MyDB.Endpoint.Address}\" >> /tmp/webapp.service
            echo Environment=\"MYSQL_USER=${DBUsername}\" >> /tmp/webapp.service
            echo Environment=\"MYSQL_PASSWORD=${DBPassword}\" >> /tmp/webapp.service
            echo Environment=\"S3BUCKET=${S3Bucket}\" >> /tmp/webapp.service
            echo Environment=\"AWS_REGION=us-east-1\" >> /tmp/webapp.service
            echo Environment=\"MYSQL_DATABASE=csye62251\" >> /tmp/webapp.service
            sudo cp /tmp/webapp.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable webapp.service
            sudo systemctl start webapp.service
            sudo systemctl status webapp.service


  ASGWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: 60
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref InstLaunchTemplate
      MaxSize: '5'
      MinSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref myTargetGroup
      VPCZoneIdentifier:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3

  webAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-WebApploadbalancer
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Scheme: internet-facing
      Type: application
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-WebApploadbalancer

  WebScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGWebApp
      Cooldown: 60
      ScalingAdjustment: 1

  WebScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGWebApp
      Cooldown: 60
      ScalingAdjustment: -1

  CpuAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '4'
      AlarmDescription: CPU utilization Alarm for > 4%
      Period: '300'
      AlarmActions:
      - !Ref WebScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ASGWebApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CpuAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '2'
      AlarmDescription: CPU utilization Alarm for < 2%
      Period: '300'
      AlarmActions:
      - !Ref WebScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ASGWebApp
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization



  myTargetGroup:
    DependsOn: webAppLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-TargetGroup
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPort: 8080
      HealthCheckProtocol: 'HTTP'
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      TargetType: instance
      VpcId: !Ref myVPC
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      
      

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myTargetGroup
      LoadBalancerArn: !Ref webAppLoadBalancer
      Port: 80
      Protocol: HTTP

  myDNSServer:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref DomainName
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'webAppLoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'webAppLoadBalancer.DNSName'

  CodeDeployServiceRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "CodeDeployServiceRole"
      # Policies:
      #   - Ref: RolePolicies
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codedeploy.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole


  CodeDeployApp:
     Type: AWS::CodeDeploy::Application
     Properties:
      ApplicationName: "csye6225-webapp"
      ComputePlatform: "Server"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-codedeploy-app'

  CodeDeploymentGroup:
     Type: AWS::CodeDeploy::DeploymentGroup
     Properties:
      DeploymentGroupName: "csye6225-webapp-deployment"
      ApplicationName: "csye6225-webapp"
      DeploymentStyle:
        DeploymentOption: "WITHOUT_TRAFFIC_CONTROL"
        DeploymentType: "IN_PLACE"
      DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
      ServiceRoleArn: !GetAtt "CodeDeployServiceRole.Arn"
      AutoScalingGroups:
        - !Ref ASGWebApp
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - "DEPLOYMENT_FAILURE"
      Ec2TagFilters:
       - Key: "Name"
         Value: !Sub '${AWS::StackName}-asg'
         Type: "KEY_AND_VALUE"

  NotificationSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "MailNotification"
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LambdaFunction.Arn

  LambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
      Path: "/"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "csye6225-spring2022"
      MemorySize: 512
      Handler: "com.mrigesh.serverless.serverless.EmailNotification::handleRequest"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: mrigeshlambdabucket.demo
        S3Key: "serverless-1.0.0.jar"
      Runtime: "java11"
      Timeout: 59
  
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref NotificationSNS
      FunctionName: !GetAtt LambdaFunction.Arn
  
  TokenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "emailID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "emailID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "TokenTable"

  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "emailID"
          AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: "7"
        WriteCapacityUnits: "7"
      KeySchema:
        - AttributeName: "emailID"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      TableName: "UsernameTokenTable"

  DynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoDBPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:Delete*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
              - 'dynamodb:BatchWrite*'                
              - 'dynamodb:DescribeStream'
              - 'dynamodb:BatchGet*'
              - 'dynamodb:List*'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeTimeToLive'
            Resource:
              - !GetAtt DynamoDB.Arn
      Roles:
        - !Ref CodeDeployEC2ServiceRole

  EC2SNSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2SNSPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sns:*
              - sns:Publish
              - sns:GetTopicAttributes
              - sns:ListTopics
              - sns:CreateTopic
            Resource:
              - "*"
      Roles:
        - !Ref CodeDeployEC2ServiceRole

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess   

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaCloudWatchPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:GetLogEvents
              - logs:CreateLogStream

            Resource:
              - arn:aws:logs:us-east-1:170773480295:*
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource:
              - "arn:aws:ses:us-east-1:170773480295:identity/demo.mrigeshdasgupta.me"
      Roles:
        - !Ref LambdaExecutionRole


  CodeDeployEC2S3Lam:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "CodeDeploy-EC2-S3-lamb"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - "arn:aws:s3:::mrigeshlambdabucket.demo"
              - "arn:aws:s3:::mrigeshlambdabucket.demo/*"
      Users:
        - "ghactions-lambda"

          
  GHUploadToS3LamB:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "GH-Upload-To-S3-lam"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObjectAcl
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - "arn:aws:s3:::mrigeshlambdabucket.demo"
              - "arn:aws:s3:::mrigeshlambdabucket.demo/*"
      Users:
        - "ghactions-lambda"

  GHCodeDeployLamda:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "GH-Code-Deploy-lam"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - codedeploy:RegisterApplicationRevision
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
            Resource:
              - "arn:aws:codedeploy:us-east-1:170773480295:application:csye6225-webapp"
          - Effect: Allow
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetDeployment
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - codedeploy:GetDeploymentConfig
            Resource:
              - 'arn:aws:codedeploy:us-east-1:170773480295:deploymentconfig:CodeDeployDefault.OneAtATime'
              - 'arn:aws:codedeploy:us-east-1:170773480295:deploymentconfig:CodeDeployDefault.HalfAtATime'
              - 'arn:aws:codedeploy:us-east-1:170773480295:deploymentconfig:CodeDeployDefault.AllAtOnce'
      Users:
        - "ghactions-lambda"

  LambdaUpdate:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:UpdateFunctionCode'
            Resource:
              - 'arn:aws:lambda:us-east-1:170773480295:function:csye6225-spring2022'
      PolicyName: Github-Lambda-Updates
      Users:
        - ghactions-lambda
    
        
Outputs:
  myVPC:
    Description: The VPC ID
    Export: 
      Name : !Sub ${AWS::StackName}-VPC
    Value: !Ref myVPC

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

  PublicSubnet3:
    Description: Public Subnet 3 ID
    Export: 
      Name: !Sub ${AWS::StackName}-PublicSubnet3
    Value: !Ref PublicSubnet3